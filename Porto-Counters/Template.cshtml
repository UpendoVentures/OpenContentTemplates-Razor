@using DotNetNuke.Entities.Modules
@{
  // Update or create the "hideadminborder" setting with the value "True"
  var currentModule = ModuleController.Instance.GetModule(Dnn.Module.ModuleID, Dnn.Module.TabID, false);
  if (currentModule != null && currentModule.TabModuleID > 0)
  {
    // Check if the "hideadminborder" setting is not set or is not "True"
    var currentSetting = currentModule.TabModuleSettings.ContainsKey("hideadminborder")
    ? currentModule.TabModuleSettings["hideadminborder"]
    : null;

    if (currentSetting == null || !currentSetting.ToString().Equals("True", StringComparison.OrdinalIgnoreCase))
    {
      // Update or create the "hideadminborder" setting with the value "True"
      ModuleController.Instance.UpdateTabModuleSetting(currentModule.TabModuleID, "hideadminborder", "True");
    }
  }

  var style = Model.Style;
  var withBackground = Model.WithBackground !=null && Model.WithBackground.ToString().ToLower() == "true";
  var withBorders = Model.WithBorders !=null && Model.WithBorders.ToString().ToLower() == "true";
  var background = Model.Background;
  var grid = Model.Grid; 
  var parallaxImage = Model.ParallaxImage;
  var inline = Model.Inline; 
}

@if (!string.IsNullOrEmpty(Model.ModuleAnchor))
{
    <div id="@Model.ModuleAnchor"></div>
}

@if (style == "Default")
{
  if (!withBackground)
  {
    <div class="@Model.Settings.Size @(withBorders ? "with-borders" : "")">
      <div class="row @Model.Settings.MarginTop @Model.Settings.MarginBottom @Model.Settings.PaddingTop @Model.Settings.PaddingBottom">
        @foreach (var item in Model.Items)
        {
          <div class="@grid">
            <div class="counter @item.item.Color">
              <em class="@item.item.Icon mb-3" aria-hidden="true"></em>
              <span class="counter-prepend">@item.item.DataPrefix</span>
              <strong data-to="@item.item.DataTo"
                data-plugin-options="{'speed': @item.item.Speed }">@item.item.DataFrom</strong>
              <span class="counter-append">@item.item.DataAppend</span>
              <label class="mt-3">@item.item.Text</label>
            </div>
          </div>
        }
      </div>
    </div>
  }

  if (withBackground)
  {
    <section
      class="@(background == "parallax" ? "parallax section section-text-light section-parallax section-center mt-none" : background)"
      data-plugin-options="{'speed': 1.5}" data-plugin-parallax="parallax" data-image-src="@parallaxImage">
      <div class="container">
        <div class="counters @(background == "section section-default" ? "counters-text-dark" : "counters-text-light")">
          <div class="row @Model.Settings.MarginTop @Model.Settings.MarginBottom @Model.Settings.PaddingTop @Model.Settings.PaddingBottom">
            @foreach (var item in Model.Items)
            {
              <div class="@grid col-sm-6">
                <div class="counter @item.item.Color">
                  <em class="@item.item.Icon mb-3" aria-hidden="true"></em>
                  <span class="counter-prepend">@item.item.DataPrefix</span>
                  <strong data-to="@item.item.DataTo"
                    data-plugin-options="{'speed': @item.item.Speed }">@item.item.DataFrom</strong>
                  <span class="counter-append">@item.item.DataAppend</span>
                  <label>@item.item.Text</label>
                </div>
              </div>
            }
          </div>
        </div>
      </div>
    </section>
  }
}

@if (style == "Inline")
{
  <div class="row">
    <div class="col-md-12">
      <p>@inline.FirstText <strong class="@(inline.AlternativeFont ? "alternative-font" : "")" data-to="@inline.DataTo"
          data-plugin-counter="DataCounter" data-plugin-options="{'speed': 3500}">
          @inline.DataFrom</strong>
        @inline.LastText</p>
    </div>
  </div>
}
<script>
  document.addEventListener("DOMContentLoaded", function () {
    function localizeCounters() {
      document.querySelectorAll(".counter strong").forEach((counter) => {
        const finalValue = parseFloat(counter.getAttribute("data-to"));
        if (isNaN(finalValue)) return;

        const currentValue = parseFloat(counter.textContent.replace(/[^0-9.-]+/g, ''));
        if (isNaN(currentValue)) return;

        // If the current number matches the final value but is not yet formatted, format it
        const alreadyFormatted = counter.textContent.includes(",") || counter.textContent.includes(".");
        if (currentValue === finalValue && !alreadyFormatted) {
          counter.textContent = new Intl.NumberFormat(navigator.language).format(currentValue);
        }
      });
    }

    // Run immediately and then every 1 second
    localizeCounters();
    const intervalId = setInterval(() => {
      localizeCounters();
    }, 500);

    // Optional: Stop after 10 seconds (adjust as needed)
    setTimeout(() => clearInterval(intervalId), 10000);
  });
</script>
