@using DotNetNuke.Entities.Modules
@{
    // Update or create the "hideadminborder" setting with the value "True"
    var currentModule = ModuleController.Instance.GetModule(Dnn.Module.ModuleID, Dnn.Module.TabID, false);
    if (currentModule != null && currentModule.TabModuleID > 0)
    {
        // Check if the "hideadminborder" setting is not set or is not "True"
        var currentSetting = currentModule.TabModuleSettings.ContainsKey("hideadminborder")
            ? currentModule.TabModuleSettings["hideadminborder"]
            : null;
       
        if (currentSetting == null || !currentSetting.ToString().Equals("True", StringComparison.OrdinalIgnoreCase))
        {
            // Update or create the "hideadminborder" setting with the value "True"
            ModuleController.Instance.UpdateTabModuleSetting(currentModule.TabModuleID, "hideadminborder", "True");
        }
    }
}

@if (!string.IsNullOrEmpty(Model.ModuleAnchor))
{
    <div id="@Model.ModuleAnchor"></div>
}
<div class="container">
    <div class="row @Model.Settings.MarginTop @Model.Settings.MarginBottom @Model.Settings.PaddingTop @Model.Settings.PaddingBottom">
    @if (Model.Settings.EnableHeadingBorder)
    {
        <div class="heading @Model.Settings.BorderColor heading-border @Model.Settings.BorderStyle @Model.Settings.BorderSize">
            <@Model.Settings.HeadingType class="@(Model.SubHeading != null ? "mb-none" : "") @Model.Settings.Uppercase @Model.Settings.HeadingColor">@Model.Heading</@Model.Settings.HeadingType>

            @if (Model.SubHeading != null)
            {
                <p class="mb-xlg mt-sm">@Model.SubHeading</p>
            }
        </div>
    }
    else
    {
        <@Model.Settings.HeadingType class="@(Model.SubHeading != null ? "mb-none" : "") @Model.Settings.Uppercase @Model.Settings.HeadingColor">@Model.Heading</@Model.Settings.HeadingType>

            if (Model.SubHeading != null)
            {
                <p class="mb-xlg mt-sm">@Model.SubHeading</p>
            }
    }
    </div>
</div>