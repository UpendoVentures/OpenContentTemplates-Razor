@using DotNetNuke.Entities.Modules
@{
    // Update or create the "hideadminborder" setting with the value "True"
    var currentModule = ModuleController.Instance.GetModule(Dnn.Module.ModuleID, Dnn.Module.TabID, false);
    if (currentModule != null && currentModule.TabModuleID > 0)
    {
        // Check if the "hideadminborder" setting is not set or is not "True"
        var currentSetting = currentModule.TabModuleSettings.ContainsKey("hideadminborder")
        ? currentModule.TabModuleSettings["hideadminborder"]
        : null;

        if (currentSetting == null || !currentSetting.ToString().Equals("True", StringComparison.OrdinalIgnoreCase))
        {
            // Update or create the "hideadminborder" setting with the value "True"
            ModuleController.Instance.UpdateTabModuleSetting(currentModule.TabModuleID, "hideadminborder", "True");
        }
    }
}

@if (!string.IsNullOrEmpty(Model.ModuleAnchor))
{
    <div id="@Model.ModuleAnchor"></div>
}
@foreach (var item in Model.Items)
{
    <div class="row">
        <div class="@item.ColMdTopText">
            <p>
                @item.TopText
            </p>
        </div>
        <div class="@item.ColMdContent">
            <blockquote class="@item.Color @Model.Settings.Reverse @Model.Settings.Borders @item.Align">
                <p>
                    @Html.Raw(item.Content)
                </p>
                <footer>@item.FooterText1<cite title="Source Title">@item.FooterText2</cite></footer>
            </blockquote>
        </div>
        <p>
            @item.BottomText
        </p>
    </div>
}