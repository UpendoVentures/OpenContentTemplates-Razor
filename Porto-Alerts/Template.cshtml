@using DotNetNuke.Entities.Modules
@{
    var currentModule = ModuleController.Instance.GetModule(Dnn.Module.ModuleID, Dnn.Module.TabID, false);
    if (currentModule != null && currentModule.TabModuleID > 0)
    {
        var currentSetting = currentModule.TabModuleSettings.ContainsKey("hideadminborder")
            ? currentModule.TabModuleSettings["hideadminborder"]
            : null;

        if (currentSetting == null || !currentSetting.ToString().Equals("True", StringComparison.OrdinalIgnoreCase))
        {
            ModuleController.Instance.UpdateTabModuleSetting(currentModule.TabModuleID, "hideadminborder", "True");
        }
    }

    var smallTextCss = "";
    if (!string.IsNullOrEmpty(Model.Settings.Size) && Model.Settings.Size.ToLower() == "alert-sm"){
        smallTextCss = " fs-6";
    }
}
@functions {
    public static string AddCssClassToTag(string html, string tagName = "a", string className = "alert-link")
    {
        if (string.IsNullOrWhiteSpace(html) || string.IsNullOrWhiteSpace(tagName) || string.IsNullOrWhiteSpace(className))
            return html;

        string pattern = "<" + tagName + "\\b([^>]*?)>";

        return System.Text.RegularExpressions.Regex.Replace(html, pattern, match =>
        {
            string tag = match.Value;

            // Check for an existing class attribute
            if (System.Text.RegularExpressions.Regex.IsMatch(tag, "\\bclass\\s*=\\s*[\"'][^\"']*[\"']", System.Text.RegularExpressions.RegexOptions.IgnoreCase))
            {
                // Append the class name to the existing classes
                return System.Text.RegularExpressions.Regex.Replace(tag, "\\bclass\\s*=\\s*[\"']([^\"']*)[\"']", delegate(System.Text.RegularExpressions.Match m)
                {
                    string classes = m.Groups[1].Value;

                    if (classes.IndexOf(className, StringComparison.OrdinalIgnoreCase) >= 0)
                        return m.Value;

                    return "class=\"" + classes + " " + className + "\"";
                }, System.Text.RegularExpressions.RegexOptions.IgnoreCase);
            }
            else
            {
                // Insert class attribute
                return tag.Replace(">", " class=\"" + className + "\">");
            }

        }, System.Text.RegularExpressions.RegexOptions.IgnoreCase | System.Text.RegularExpressions.RegexOptions.Multiline);
    }
}

@if (!string.IsNullOrEmpty(Model.ModuleAnchor))
{
    <div id="@Model.ModuleAnchor"></div>
}

<div class="alert @Model.Settings.Color @Model.Settings.Size @((Model.Settings.Dismissible ?? false) ? "alert-dismissible fade show" : "") px-4" role="alert">
    @if (Model.Settings.Dismissible ?? false)
    {
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    }

    @if (!string.IsNullOrEmpty(Model.Title))
    {
        <div class="fw-bold mt-3 mb-2 mx-2">
            <h4 class="h5 fw-bold @smallTextCss">@Model.Title</h4>
        </div>
    }

    @if (Model.Settings.ShowIcon ?? false)
    {
        <div class="row align-items-center mb-2">
            <div class="col-auto py-2 pe-1">
                <em class="@Model.Icon fs-3"></em>
            </div>
            <div class="col py-2 pe-1 @smallTextCss">
                @Html.Raw(AddCssClassToTag(Model.Content))
            </div>
        </div>
    }
    else
    {
        <div class="mb-2">
            @Html.Raw(Model.Content)
        </div>
    }

    @if (Model.Settings.ShowBtn ?? false)
    {
        <div class="d-flex gap-2 mt-3">
            <button type="button" class="btn btn-primary btn-sm">@Model.btn1Text</button>
            <button type="button" class="btn btn-secondary btn-sm">@Model.btn2Text</button>
        </div>
    }
</div>
