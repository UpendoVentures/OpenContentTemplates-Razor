@using DotNetNuke.Entities.Modules
@{
    // Update or create the "hideadminborder" setting with the value "True"
    var currentModule = ModuleController.Instance.GetModule(Dnn.Module.ModuleID, Dnn.Module.TabID, false);
    if (currentModule != null && currentModule.TabModuleID > 0)
    {
        // Check if the "hideadminborder" setting is not set or is not "True"
        var currentSetting = currentModule.TabModuleSettings.ContainsKey("hideadminborder")
        ? currentModule.TabModuleSettings["hideadminborder"]
        : null;

        if (currentSetting == null || !currentSetting.ToString().Equals("True", StringComparison.OrdinalIgnoreCase))
        {
            // Update or create the "hideadminborder" setting with the value "True"
            ModuleController.Instance.UpdateTabModuleSetting(currentModule.TabModuleID, "hideadminborder", "True");
        }
    }
}

@if (!string.IsNullOrEmpty(Model.ModuleAnchor))
{
    <div id="@Model.ModuleAnchor"></div>
}
@if (Model.Sections != null)
{
    foreach (var item in Model.Sections)
    {
        <@(item.Size) class="mb-sm word-rotator-title">
            @item.Text
            @if (item.Color == "transparent")
            {
            <strong>
                <span class="word-rotate" data-plugin-options="{'delay': 2000, 'animDelay': 300}">
                    <span class="word-rotate-items">
                            @if (item.WordRotate != null)
                            {
                                foreach (var word in item.WordRotate)
                                {
                                <span>@word.Value</span>
                                }
                            }
                    </span>
                </span>
            </strong>
            }
            else
            {
            <strong class="inverted @item.Color">
                <span class="word-rotate" data-plugin-options="{'delay': 2000, 'animDelay': 300}">
                    <span class="word-rotate-items">
                            @if (item.WordRotate != null)
                            {
                                foreach (var word in item.WordRotate)
                                {
                                <span>@word.Value</span>
                                }
                            }
                    </span>
                </span>
            </strong>
            }
            @item.OtherText
        </@(item.Size)>
    }
}