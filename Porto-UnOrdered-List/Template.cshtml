@using DotNetNuke.Entities.Modules
@{
    // Update or create the "hideadminborder" setting with the value "True"
    var currentModule = ModuleController.Instance.GetModule(Dnn.Module.ModuleID, Dnn.Module.TabID, false);
    if (currentModule != null && currentModule.TabModuleID > 0)
    {
        // Check if the "hideadminborder" setting is not set or is not "True"
        var currentSetting = currentModule.TabModuleSettings.ContainsKey("hideadminborder")
        ? currentModule.TabModuleSettings["hideadminborder"]
        : null;

        if (currentSetting == null || !currentSetting.ToString().Equals("True", StringComparison.OrdinalIgnoreCase))
        {
            // Update or create the "hideadminborder" setting with the value "True"
            ModuleController.Instance.UpdateTabModuleSetting(currentModule.TabModuleID, "hideadminborder", "True");
        }
    }
}

@functions {
  public bool ConvertToBool(dynamic value)
  {
    return value != null && value.ToString().ToLower() == "true";
  }
    public string GetListClass(string type)
    {
        switch (type)
        {
            case "Unordered":
                return "";
            case "Unstyled":
                return "list-unstyled";
            case "Icons":
                return "list list-icons";
            default:
                return "";
        }
    }
}

@if (!string.IsNullOrEmpty(Model.ModuleAnchor))
{
    <div id="@Model.ModuleAnchor"></div>
}
@if (ConvertToBool(Model.DescriptionLists))
{
    <dl>
        @if (Model.ItemsDescription != null)
        {
            foreach (var item in Model.ItemsDescription)
            {
                <dt>@item.Title</dt>
                <dd>@item.ListItemText</dd>
            }
        }

    </dl>
}
else
{
    <ul
        class="@GetListClass(Model.Type) @Model.Settings.IconsColor @Model.Settings.ListBorder @Model.Settings.IconStyle @Model.Settings.IconsSizes @Model.Settings.IconsPosition">
        @if (Model.Items != null)
        {
            foreach (var item in Model.Items)
            {
                <li @if (Model.Settings.EnableAnimations)
                {
                    <text>
                        data-appear-animation="@Model.Settings.AnimationType"
                        data-appear-animation-delay="@Model.Settings.AnimationDelay"
                    </text>
                }>
                    @if (!string.IsNullOrEmpty(item.Icon))
                    {
                        <em class="@item.Icon"></em>
                    }
                    @item.ListItemText

                    @if (item.SecondLevelListItems !=null)
                    {
                        <ul
                          class="@GetListClass(Model.Type) @Model.Settings.IconsColor @Model.Settings.ListBorder @Model.Settings.IconStyle @Model.Settings.IconsSizes @Model.Settings.IconsPosition">
                            @foreach (var secondLevelItem in item.SecondLevelListItems)
                            {
                                <li>
                                    @if (!string.IsNullOrEmpty(secondLevelItem.SecondLevelListItemIcon))
                                    {
                                        <em class="@secondLevelItem.SecondLevelListItemIcon"></em>
                                    }
                                    @secondLevelItem.SecondLevelListItemText
                                </li>
                            }
                        </ul>
                    }
                </li>
            }
        }
    </ul>
}