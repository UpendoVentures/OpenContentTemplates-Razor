@using DotNetNuke.Entities.Modules
@{
  // Update or create the "hideadminborder" setting with the value "True"
  var currentModule = ModuleController.Instance.GetModule(Dnn.Module.ModuleID, Dnn.Module.TabID, false);
  if (currentModule != null && currentModule.TabModuleID > 0)
  {
    // Check if the "hideadminborder" setting is not set or is not "True"
    var currentSetting = currentModule.TabModuleSettings.ContainsKey("hideadminborder")
    ? currentModule.TabModuleSettings["hideadminborder"]
    : null;

    if (currentSetting == null || !currentSetting.ToString().Equals("True", StringComparison.OrdinalIgnoreCase))
    {
      // Update or create the "hideadminborder" setting with the value "True"
      ModuleController.Instance.UpdateTabModuleSetting(currentModule.TabModuleID, "hideadminborder", "True");
    }
  }
}

@if (!string.IsNullOrEmpty(Model.ModuleAnchor))
{
    <div id="@Model.ModuleAnchor"></div>
}
<section class="call-to-action with-borders with-button-arrow mb-xl">
  <div class="call-to-action-content">
    @if(Model.Content != null)
    {
       @Model.Content.ToString()
    }
   
  </div>
  <div class="call-to-action-btn mt-lg">
    <a href="@Model.Buttom.Link" target="_blank" class="btn btn-lg mt-xs @Model.Buttom.Color">
      @Model.Buttom.Text
    </a>
    <span class="arrow @Model.Arrow"
      style="top: @(Model.ArrowPosition.Top)px; left: @(Model.ArrowPosition.Left)px;"></span>
  </div>
</section>