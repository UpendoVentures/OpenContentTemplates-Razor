@using DotNetNuke.Entities.Modules
@{
    // Update or create the "hideadminborder" setting with the value "True"
    var currentModule = ModuleController.Instance.GetModule(Dnn.Module.ModuleID, Dnn.Module.TabID, false);
    if (currentModule != null && currentModule.TabModuleID > 0)
    {
        // Check if the "hideadminborder" setting is not set or is not "True"
        var currentSetting = currentModule.TabModuleSettings.ContainsKey("hideadminborder")
        ? currentModule.TabModuleSettings["hideadminborder"]
        : null;

        if (currentSetting == null || !currentSetting.ToString().Equals("True", StringComparison.OrdinalIgnoreCase))
        {
            // Update or create the "hideadminborder" setting with the value "True"
            ModuleController.Instance.UpdateTabModuleSetting(currentModule.TabModuleID, "hideadminborder", "True");
        }
    }
}

@if (!string.IsNullOrEmpty(Model.ModuleAnchor))
{
    <div id="@Model.ModuleAnchor"></div>
}
@if (Model.Sections != null)
{
    foreach (var item in Model.Sections)
    {
        if (item.Class == "default")
        {
            <@(item.Size) class="mb-sm word-rotator-title">
                @item.Text
            <span class="@item.Color">@item.TextWidthColor</span>
            <span class="alternative-font">@item.AlternativeFont</span>
                @item.OtherText
            </@(item.Size)>
        }
        else
        {
            <p class="@item.Class">
                @item.Text
                <span class="@item.Color">@item.TextWidthColor</span>
                <span class="alternative-font">@item.AlternativeFont</span>
                @item.OtherText
            </p>
        }
    }
}