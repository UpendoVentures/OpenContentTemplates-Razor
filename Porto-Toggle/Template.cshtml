@using DotNetNuke.Entities.Modules
@{
    // Update or create the "hideadminborder" setting with the value "True"
    var currentModule = ModuleController.Instance.GetModule(Dnn.Module.ModuleID, Dnn.Module.TabID, false);
    if (currentModule != null && currentModule.TabModuleID > 0)
    {
        // Check if the "hideadminborder" setting is not set or is not "True"
        var currentSetting = currentModule.TabModuleSettings.ContainsKey("hideadminborder")
        ? currentModule.TabModuleSettings["hideadminborder"]
        : null;

        if (currentSetting == null || !currentSetting.ToString().Equals("True", StringComparison.OrdinalIgnoreCase))
        {
            // Update or create the "hideadminborder" setting with the value "True"
            ModuleController.Instance.UpdateTabModuleSetting(currentModule.TabModuleID, "hideadminborder", "True");
        }
    }
}

@functions {
  public bool ConvertToBool(dynamic value)
  {
    return value != null && value.ToString().ToLower() == "true";
  }
}

@if (!string.IsNullOrEmpty(Model.ModuleAnchor))
{
    <div id="@Model.ModuleAnchor"></div>
}
<div class="toggle @Model.Settings.Color @Model.Settings.Size @Model.Settings.Mode"
     @(ConvertToBool(Model.Settings.OneOnly) ? "data-plugin-options=\"{ 'isAccordion': true }\"" : "")
     data-plugin-toggle="toggle" id="toggle-@Model.Context.ModuleId">
    @{
        int index = 0;
    }
    @foreach (var item in Model.Items)
    {
        <section class="toggle @(ConvertToBool(item.Active) ? "active" : "")" 
                 id="toggle-@Model.Context.ModuleId-@index">
            <button class="toggle-heading" type="button">@item.Title</button>
            @if (Model.Settings.Faq == "false")
            {
                <div class="toggle-content">@Html.Raw(item.Content)</div>
            }
            else
            {
                <p>@Html.Raw(item.Content)</p>
            }
        </section>
        index++;
    }
</div>
